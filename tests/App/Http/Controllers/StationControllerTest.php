<?php
/**
 * StationControllerTest.php
 */

namespace App\Http\Controllers;


use App\Models\Device;
use App\Models\Path;
use App\Models\Station;
use App\Types\DeviceStatus;
use Illuminate\Testing\Fluent\AssertableJson;

class StationControllerTest extends \TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate');
    }

    public function tearDown(): void
    {
        $this->artisan('migrate:reset');
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testAllEmpty()
    {
        $response = $this->get('/api/devices');
        $response->assertResponseStatus(200);
        $response->receiveJson([]);
    }

    public function testAll()
    {
        $this->artisan('db:seed --class=StationSeeder');

        $response = $this->json('get', '/api/stations');
        $response->assertResponseStatus(200);
        $this->assertNotEmpty($response->response);
    }

    public function testFind()
    {
        $this->artisan('db:seed --class=StationSeeder');
        $station = Station::first();

        $response = $this->json('get', '/api/station', ['id' => $station->getId()]);
        $response->response->assertJson(function(AssertableJson $json) {
            $json->hasAll(
                ['id', 'name']
            );
        });
    }

    public function testCreate()
    {
        $response = $this->post('/api/station', ['name' => "test"]);
        $response->response->assertJson(function(AssertableJson $json) {
            $json->hasAll(['id', 'name']);
        });
    }

    public function testEnter()
    {
        $this->artisan('db:seed --class=StationSeeder');
        $this->artisan('db:seed --class=UserSeeder');
        $this->artisan('db:seed --class=DeviceSeeder');
        $station = Station::first();
        $device = Device::first();
        $device->setStatus(DeviceStatus::STANDBY)->save();

        $response = $this->post('/api/station/enter', ['stationId' => $station->getId(), 'deviceId' => $device->getId()]);
        $response->assertResponseStatus(200);
        $response->receiveJson(['stationId' => $station->getId(), 'deviceId' => $device->getId()]);
    }

    public function testExit()
    {
        $this->artisan('db:seed --class=StationSeeder');
        $this->artisan('db:seed --class=UserSeeder');
        $this->artisan('db:seed --class=DeviceSeeder');
        $station = Station::first();
        $device = Device::first();
        $device->setStatus(DeviceStatus::IN_MOTORWAY)->save();

        $response = $this->post('/api/station/exit', ['stationId' => $station->getId(), 'deviceId' => $device->getId()]);
        $response->assertResponseStatus(200);
        $response->receiveJson(['stationId' => $station->getId(), 'deviceId' => $device->getId()]);
    }

    public function testDriveThrough()
    {
        $this->artisan('db:seed --class=StationSeeder');
        $this->artisan('db:seed --class=UserSeeder');
        $this->artisan('db:seed --class=DeviceSeeder');
        $station = Station::first();
        $device = Device::first();
        $device->setStatus(DeviceStatus::IN_MOTORWAY)->save();

        $response = $this->post('/api/station/driveThrough', ['stationId' => $station->getId(), 'deviceId' => $device->getId()]);
        $response->assertResponseStatus(200);
        $response->receiveJson(['stationId' => $station->getId(), 'deviceId' => $device->getId()]);
    }
}
