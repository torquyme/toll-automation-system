<?php
/**
 * PathControllerTest.php
 */

namespace App\Http\Controllers;


use App\Models\Path;
use App\Models\Station;
use Illuminate\Testing\Fluent\AssertableJson;

class PathControllerTest extends \TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate');
    }

    public function tearDown(): void
    {
        $this->artisan('migrate:reset');
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testAllEmpty()
    {
        $response = $this->get('/api/paths');
        $response->assertResponseStatus(200);
        $response->receiveJson([]);
    }

    public function testFind()
    {
        $this->artisan('db:seed --class=StationSeeder');
        $this->artisan('db:seed --class=PathSeeder');

        $path = Path::first();
        $response = $this->json('get', '/api/path', ['id' => $path->getId()]);
        $response->response->assertJson(function(AssertableJson $json) {
           $json->hasAll(
               ['id', 'startStation', 'endStation', 'cost']
           );
        });
    }

    public function testAll()
    {
        $this->artisan('db:seed --class=StationSeeder');
        $this->artisan('db:seed --class=PathSeeder');

        $response = $this->json('get', '/api/paths');
        $response->assertResponseStatus(200);
        $this->assertNotEmpty($response->response);
    }

    public function testCreate()
    {
        $this->artisan('db:seed --class=StationSeeder');
        $stations = Station::all()->pop(2);
        $startStation = $stations->pop();
        $endStation = $stations->pop();

        $startStationId = $startStation->getId();
        $endStationId = $endStation->getId();

        $response = $this->post('/api/path', ['startStationId' => $startStationId, 'endStationId' => $endStationId, 'cost' => 10]);
        $response->assertResponseStatus(200);
        $response->response->assertJson(function(AssertableJson $json) use ($startStationId, $endStationId) {
            $json->count(2);
            $json->first(function(AssertableJson $json) use ($startStationId, $endStationId) {
                $json->hasAll(['id', 'startStation', 'endStation', 'cost']);
                $json->whereContains('startStation', ['id' => $startStationId]);
            });
        });
    }
}
