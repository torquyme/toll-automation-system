<?php
/**
 * DeviceControllerTest.php
 */

namespace App\Http\Controllers;


use App\Models\Device;
use App\Models\User;
use App\Types\DeviceStatus;
use Illuminate\Testing\Fluent\AssertableJson;

class DeviceControllerTest extends \TestCase
{

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate');
    }

    public function tearDown(): void
    {
        $this->artisan('migrate:reset');
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testAllEmpty()
    {
        $response = $this->get('/api/devices');
        $response->assertResponseStatus(200);
        $response->receiveJson([]);
    }

    public function testFind()
    {
        $this->artisan('db:seed --class=UserSeeder');
        $this->artisan('db:seed --class=DeviceSeeder');

        $device = Device::first();
        $userId = $device->getUserId();

        $response = $this->json('get', '/api/device', ['id' => $device->getId()])
            ->shouldReturnJson(
                ['id' => $device->getId(), 'userId'=> $userId]
            );
        $response->assertResponseStatus(200);
    }

    public function testCreate()
    {
        $this->artisan('db:seed --class=UserSeeder');
        $user = User::first();
        $device = $this->post('/api/device', ['userId' => $user->getId(), 'status' => DeviceStatus::STANDBY]);

        $device->response->assertJson(function(AssertableJson $json) {
           $json->hasAll([
               'id',
               'status',
               'statusDescription',
               'userId'
           ]);
        });
    }

    public function testLogs()
    {
        $this->artisan('db:seed --class=UserSeeder');
        $this->artisan('db:seed --class=DeviceSeeder');
        $this->artisan('db:seed --class=StationSeeder');
        $this->artisan('db:seed --class=StationLogSeeder');

        $device = Device::first();
        $response = $this->json('get', '/api/device/logs', ['id' => $device->getId()]);
        $response->assertResponseStatus(200);
        $response->response->assertJson(function(AssertableJson $json) {
           $json->each(function(AssertableJson $json) {
              $json->hasAll([
                  'id',
                  'device',
                  'station',
                  'action',
                  'status'
              ]);
           });
        });
    }
}
